name: Build Nezha

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
        include:
          - goos: linux
            goarch: s390x
          - goos: linux
            goarch: arm64

    runs-on: ubuntu-latest
    container:
      image: goreleaser/goreleaser-cross:v1.21
    
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      GOARM: ${{ matrix.goarm }}

    steps:
    - name: Set up Git
      run: |
        echo "============= www ==================="
        echo "$GITHUB_WORKSPACE"
        echo "${{ github.workspace }}"
        git config --global --add safe.directory "$GITHUB_WORKSPACE"

    - name: Checkout nezha repository
      uses: actions/checkout@v4
      with:
        repository: naiba/nezha
        fetch-depth: 0

    - name: Fetch tags
      run: |
        git fetch --tags
        echo "===============0.0================"
        pwd
        echo "===============0.0================"
        ls -all .

    - name: Fetch IPInfo GeoIP Database
      env:
        IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
      run: |
        rm pkg/geoip/geoip.db
        wget -qO pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${IPINFO_TOKEN}
        echo "===============1================"
        pwd
        ls -all .

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'

    - name: Build
      uses: goreleaser/goreleaser-action@v6
      with:
        distribution: goreleaser
        version: '~> v2'
        args: build --single-target --clean --skip=validate

    - name: Prepare dist directory
      env:
        DIST_DIR: ./dist
      run: |
        ls -all "${DIST_DIR}"
        find . -type f

        mkdir -p "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}/data"
        cp -rf script/config.yaml "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}/data/config.yaml"

        cp -rf resource "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}/resource"
        rm -rf "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}/resource/resource.go"

        # Copy built binary
        cp -rf ./dist/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}/* "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}/"

        chmod +x "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}"

        ls -all "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}"

    - name: Compress artifacts into zip
      run: |
        cd "${DIST_DIR}"
        zip -r "dashboard-${{ matrix.goos }}-${{ matrix.goarch }}.zip" "dashboard-${{ matrix.goos }}-${{ matrix.goarch }}"
        ls -all "${DIST_DIR}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-${{ matrix.goos }}-${{ matrix.goarch }}.zip
        path: ./dist/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Release
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./assets

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "assets/*.zip"
        generateReleaseNotes: true
