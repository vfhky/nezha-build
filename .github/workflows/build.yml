name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.19.20'

jobs:
  set_version:
    name: Set Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.VERSION }}
    steps:
      - name: Set version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=${{ github.event.inputs.tag }}
          else
            VERSION=$(curl -sL "https://api.github.com/repos/naiba/nezha/releases/latest" | jq -r .tag_name)
          fi
          if [ -z "${VERSION}" ]; then
            echo "Error: VERSION could not be determined" >&2
            exit 1
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version set to: ${VERSION}"

  freebsd_build:
    name: Build for FreeBSD
    runs-on: ubuntu-latest
    needs: set_version
    env:
      DIST_DIR: '${{ github.workspace }}/dist'
    steps:
      - uses: actions/checkout@v4

      - name: Checkout nezha repository
        uses: actions/checkout@v4
        with:
          repository: naiba/nezha
          ref: ${{ needs.set_version.outputs.version }}
          path: nezha

      - name: Fetch IPInfo GeoIP Database
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          rm -rf nezha/pkg/geoip/geoip.db
          wget -qO nezha/pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${IPINFO_TOKEN}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup FreeBSD environment
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          release: 14.1
          prepare: |
            pkg install -y wget curl git go121 gcc bash jq node zip
            ln -s /usr/local/bin/go121 /usr/local/bin/go

      - name: Build the project
        run: |
          version_num=${{ needs.set_version.outputs.version }}
          version_num=${version_num#v}
          cd nezha/cmd/dashboard
          go build -ldflags="-s -w --extldflags '-static -fpic' -X github.com/naiba/nezha/service/singleton.Version=${version_num}"

      - name: Prepare dist directory
        run: |
          mkdir -p "${DIST_DIR}"
          cp -rf "nezha/resource" "${DIST_DIR}"
          rm "${DIST_DIR}/resource/resource.go"
          mv -f "nezha/cmd/dashboard/dashboard" "${DIST_DIR}/nezha-dashboard"
          mkdir -p "${DIST_DIR}/data"
          cp -rf nezha/script/config.yaml "${DIST_DIR}/data/config.yaml"

      - name: Compress dist files
        run: |
          TEMP_DIR=$(mktemp -d)
          cp -R "${DIST_DIR}/." "$TEMP_DIR"
          rm -rf "${DIST_DIR}"/*
          cd "$TEMP_DIR"
          zip -qr "${DIST_DIR}/dashboard-freebsd-amd64.zip" .
          tar -czf "${DIST_DIR}/dashboard-freebsd-amd64.tar.gz" .

      - name: Upload artifact for FreeBSD
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-freebsd-amd64
          path: |
            ${{ env.DIST_DIR }}/*

  build:
    strategy:
      fail-fast: true
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: s390x
          - goos: windows
            goarch: amd64
            
    name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
    runs-on: ubuntu-latest
    needs: set_version
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      DIST_DIR: '${{ github.workspace }}/dist'

    steps:
      - name: Checkout nezha repository
        uses: actions/checkout@v4
        with:
          repository: naiba/nezha
          ref: ${{ needs.set_version.outputs.version }}
          path: nezha

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21.x"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip

      - name: Fetch IPInfo GeoIP Database
        env:
          IPINFO_TOKEN: ${{ secrets.IPINFO_TOKEN }}
        run: |
          rm -rf nezha/pkg/geoip/geoip.db
          wget -qO nezha/pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${IPINFO_TOKEN}

      - name: Build for other platforms
        working-directory: nezha/cmd/dashboard
        run: |
          version_num=${{ needs.set_version.outputs.version }}
          version_num=${version_num#v}
          go build -ldflags="-s -w --extldflags '-static -fpic' -X github.com/naiba/nezha/service/singleton.Version=${version_num}"

      - name: Prepare dist directory
        run: |
          mkdir -p "${DIST_DIR}"
          cp -rf nezha/resource "${DIST_DIR}"
          rm "${DIST_DIR}/resource/resource.go"
          mkdir -p "${DIST_DIR}/data"
          cp -rf nezha/script/config.yaml "${DIST_DIR}/data/config.yaml"
          mv -f nezha/cmd/dashboard/dashboard "${DIST_DIR}/nezha-dashboard"

      - name: Compress dist files
        run: |
          TEMP_DIR=$(mktemp -d)
          cp -R "${DIST_DIR}/." "$TEMP_DIR"
          rm -rf "${DIST_DIR}"/*
          cd "$TEMP_DIR"
          zip -qr "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}.zip" .
          tar -czf "${DIST_DIR}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz" .

      - name: Upload artifacts for other platforms
        uses: actions/upload-artifact@v4
        with:
          name: dashboard-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ env.DIST_DIR }}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}.zip
            ${{ env.DIST_DIR }}/dashboard-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz

  release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [freebsd_build, build]
    name: Release
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.set_version.outputs.version }}
          artifacts: "assets/*/*.{zip,tar.gz}"
          generateReleaseNotes: true
          makeLatest: legacy
          omitBody: false
          omitBodyDuringUpdate: false
          omitDraftDuringUpdate: false
          omitName: false
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          removeArtifacts: false
          replacesArtifacts: true
          skipIfReleaseExists: false
          updateOnlyUnreleased: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
