name: Build and Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v1.4.2'

jobs:
  release:
    name: build and release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup and Build on FreeBSD
        uses: vmactions/freebsd-vm@v1
        with:
          usesh: true
          release: 14.1
          prepare: |
            pkg install -y wget curl git gcc bash jq node zip
            fetch https://go.dev/dl/go1.22.0.freebsd-amd64.tar.gz
            rm -rf /usr/local/go
            tar -C /usr/local -xzf go1.22.0.freebsd-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_freebsd_amd64 -o /usr/local/bin/yq
            chmod +x /usr/local/bin/yq
            yq --version
          run: |
            # https://typecodes.com/linux/githubworkflownezhafreebsdserv00.html
            echo "==================== 1 get nezha version ========================"
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              VERSION=${{ github.event.inputs.tag }}
            else
              VERSION=$(curl -sL "https://api.github.com/repos/naiba/nezha/releases/latest" | jq -r .tag_name)
            fi

            if [ -z "${VERSION}" ]; then
              echo "Error: VERSION could not be determined" >&2
              exit 1
            fi

            echo "VERSION=${VERSION}" >> $GITHUB_ENV
            echo "Version set to: ${VERSION}"

            # Build the project
            version_num=${VERSION#v}
            echo "==================== 2 download nezha git ========================"
            if git ls-remote --tags https://github.com/naiba/nezha | grep -q "refs/tags/${VERSION}"; then
              git clone -b ${VERSION} https://github.com/naiba/nezha
            else
              echo "Error: Tag ${VERSION} not found in naiba/nezha repository" && exit 1
            fi
            
            # Clean old dist directories
            rm -rf nezha/cmd/dashboard/*-dist
            
            # Download all frontend dependencies
            echo "==================== 3 fetch front module ========================"
            cd nezha
            chmod +x ./script/fetch-frontends.sh && bash ./script/fetch-frontends.sh
            cd ../
            
            # Download GeoIP database
            rm -rf nezha/pkg/geoip/geoip.db
            wget -qO nezha/pkg/geoip/geoip.db https://ipinfo.io/data/free/country.mmdb?token=${{ secrets.IPINFO_TOKEN }}
            
            echo "==================== 4 Install Swag for Swagger docs ========================"
            # Install Swag for Swagger docs
            go install github.com/swaggo/swag/cmd/swag@latest
            
            # Ensure Swag is in PATH
            export PATH=$PATH:$(go env GOPATH)/bin
            
            echo "==================== 5 Swag init ========================"
            # Generate Swagger docs
            cd nezha
            $(go env GOPATH)/bin/swag init --pd -d . -g ./cmd/dashboard/main.go -o ./cmd/dashboard/docs --parseGoList=false
            
            # Build the project
            cd cmd/dashboard
            echo "==================== 6 go build ========================"
            go mod tidy
            go build -ldflags "-s -w -X github.com/nezhahq/nezha/service/singleton.Version=${version_num} -extldflags '-static -fpic'" -trimpath -buildvcs=false

            echo "==================== 7 check output file ========================"
            file dashboard
            
            echo "==================== 8 output archive ========================"
            # Create output directory
            mkdir -p ../../output
            mv dashboard ../../output/nezha-dashboard

            # Prepare config.yaml
            mkdir -p ../../output/data
            #cp -rf ../../script/config.yaml ../../output/data/config.yaml
            wget -qO ../../output/data/config.yaml "https://raw.githubusercontent.com/nezhahq/scripts/main/extras/config.yaml"

            # Compress dist files
            cd ../../output

            zip -qr nezha-dashboard.zip .
            mv nezha-dashboard.zip ..

            tar -czf nezha-dashboard.tar.gz *

            mv ../nezha-dashboard.zip .
            echo "==================== 9 check output again ========================"
            file nezha-dashboard

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nezha-freebsd
          path: |
            nezha/output/*

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          artifacts: "nezha/output/*.zip,nezha/output/*.tar.gz"
          generateReleaseNotes: true
          makeLatest: legacy
          omitBody: false
          omitBodyDuringUpdate: false
          omitDraftDuringUpdate: false
          omitName: false
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          removeArtifacts: false
          replacesArtifacts: true
          skipIfReleaseExists: false
          updateOnlyUnreleased: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
